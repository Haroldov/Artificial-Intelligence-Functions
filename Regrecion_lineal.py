# -*- coding: utf-8 -*-
"""
Created on Thu Aug 30 15:33:16 2018

@author: mateo
"""
import numpy as np
import matplotlib.pyplot as ml

def lr(speed, samples, y, iterations): #rls -> Linear regression
    num_x =  samples.shape 
    num_xi = num_x[1] # Number of characteristics "Numero de colmnas de data"
    num_sam = num_x[0] # Number of samples "Numero de filas de data"
    weight = ((np.random.rand(1,num_xi)/10) + 0.00001) # Genera pesos 
    #aleatorios de 0.00001 a 0.1  -> vector de pesos  
    for i in range(iterations):
        delta = ((1/num_sam)*((np.sum((samples*weight),axis = 1))-y))
        delta = np.reshape(delta, [np.size(delta),1])
        delta = np.sum((delta*samples),axis = 0)
        delta = speed*delta
        if np.sum(np.absolute(delta)) < 0.1:
           break 
        weight = weight+delta
    print(np.absolute(delta))
    print(weight)
    print(i)
    return(weight)

speed = 0.001
samples = np.array([[1,0.13],[1,0.23],[1,0.33],[1,0.43],[1,0.53],[1,0.63],
                     [1,0.73],[1,0.83],[1,0.93],[1,1.03],[1,1.13],[1,1.23],
                     [1,1.33],[1,1.43],[1,1.53],[1,1.63],[1,1.73],[1,1.83],
                     [1,1.93],[1,2.03],[1,2.13],[1,2.23],[1,2.33],[1,2.43],
                     [1,2.53],[1,2.63],[1,2.73],[1,2.83],[1,2.93],[1,3.03],
                     [1,3.13],[1,3.23],[1,3.33],[1,3.43],[1,3.53],[1,3.63],
                     [1,3.73],[1,3.83],[1,3.93],[1,4.03],[1,4.13],[1,4.23],
                     [1,4.33],[1,4.43],[1,4.53],[1,4.63],[1,4.73],[1,4.83],
                     [1,4.93],[1,5.03],[1,5.13],[1,5.23],[1,5.33],[1,5.43],
                     [1,5.53],[1,5.63],[1,5.73],[1,5.83],[1,5.93],[1,6.03],
                     [1,6.13],[1,6.23],[1,6.33],[1,6.43],[1,6.53],[1,6.63],
                     [1,6.73],[1,6.83],[1,6.93],[1,7.03],[1,7.13],[1,7.23],
                     [1,7.33],[1,7.43],[1,7.53],[1,7.63],[1,7.73],[1,7.83],
                     [1,7.93],[1,8.03],[1,8.13],[1,8.23],[1,8.33],[1,8.43],
                     [1,8.53],[1,8.63],[1,8.73],[1,8.83],[1,8.93],[1,9.03],
                     [1,9.13],[1,9.23],[1,9.33],[1,9.43],[1,9.53],[1,9.63],
                     [1,9.73],[1,9.83],[1,9.93],[1,10.03],[1,10.13],[1,10.23],
                     [1,10.33],[1,10.43],[1,10.53],[1,10.63],[1,10.73]])
y = np.array([1.690000e-02, 5.290000e-02, 1.089000e-01, 1.849000e-01,
       2.809000e-01, 3.969000e-01, 5.329000e-01, 6.889000e-01,
       8.649000e-01, 1.060900e+00, 1.276900e+00, 1.512900e+00,
       1.768900e+00, 2.044900e+00, 2.340900e+00, 2.656900e+00,
       2.992900e+00, 3.348900e+00, 3.724900e+00, 4.120900e+00,
       4.536900e+00, 4.972900e+00, 5.428900e+00, 5.904900e+00,
       6.400900e+00, 6.916900e+00, 7.452900e+00, 8.008900e+00,
       8.584900e+00, 9.180900e+00, 9.796900e+00, 1.043290e+01,
       1.108890e+01, 1.176490e+01, 1.246090e+01, 1.317690e+01,
       1.391290e+01, 1.466890e+01, 1.544490e+01, 1.624090e+01,
       1.705690e+01, 1.789290e+01, 1.874890e+01, 1.962490e+01,
       2.052090e+01, 2.143690e+01, 2.237290e+01, 2.332890e+01,
       2.430490e+01, 2.530090e+01, 2.631690e+01, 2.735290e+01,
       2.840890e+01, 2.948490e+01, 3.058090e+01, 3.169690e+01,
       3.283290e+01, 3.398890e+01, 3.516490e+01, 3.636090e+01,
       3.757690e+01, 3.881290e+01, 4.006890e+01, 4.134490e+01,
       4.264090e+01, 4.395690e+01, 4.529290e+01, 4.664890e+01,
       4.802490e+01, 4.942090e+01, 5.083690e+01, 5.227290e+01,
       5.372890e+01, 5.520490e+01, 5.670090e+01, 5.821690e+01,
       5.975290e+01, 6.130890e+01, 6.288490e+01, 6.448090e+01,
       6.609690e+01, 6.773290e+01, 6.938890e+01, 7.106490e+01,
       7.276090e+01, 7.447690e+01, 7.621290e+01, 7.796890e+01,
       7.974490e+01, 8.154090e+01, 8.335690e+01, 8.519290e+01,
       8.704890e+01, 8.892490e+01, 9.082090e+01, 9.273690e+01,
       9.467290e+01, 9.662890e+01, 9.860490e+01, 1.006009e+02,
       1.026169e+02, 1.046529e+02, 1.067089e+02, 1.087849e+02,
       1.108809e+02, 1.129969e+02, 1.151329e+02])

iterations = 1000
weight = lr(speed, samples, y, iterations)
x = np.arange(0,11,0.01)
z = weight[0,0]+(weight[0,1]*x)
ml.plot(samples[:,1], y[:], 'ro',x,z, 'bs')
ml.axis([0, 11, 0,120])
ml.show()
    
    